#include <iostream>
#include <vector>
#include <limits>

using namespace std;

// Function to display the Tic-Tac-Toe board
void displayBoard(const vector<vector<char>> &board)
{
    for (const auto &row : board)
    {
        for (char cell : row)
        {
            cout << cell << ' ';
        }
        cout << endl;
    }
}

// Function to check if a player has won
bool checkWin(const vector<vector<char>> &board, char player)
{
    // Check rows and columns
    for (int i = 0; i < 3; ++i)
    {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player))
        {
            return true;
        }
    }

    // Check diagonals
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player))
    {
        return true;
    }

    return false;
}

// Function to check if the board is full (a draw)
bool checkDraw(const vector<vector<char>> &board)
{
    for (const auto &row : board)
    {
        for (char cell : row)
        {
            if (cell == ' ')
                return false; // There is an empty space, the game is not a draw
        }
    }
    return true; // All spaces are filled, the game is a draw
}

// Function to get valid user input for row and column
void getUserInput(int &row, int &col)
{
    while (true)
    {
        cout << "Enter row (1, 2, or 3): ";
        if (!(cin >> row) || row < 1 || row > 3)
        {
            cin.clear();                                         // Clear error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a number between 1 and 3." << endl;
        }
        else
        {
            break;
        }
    }

    while (true)
    {
        cout << "Enter column (1, 2, or 3): ";
        if (!(cin >> col) || col < 1 || col > 3)
        {
            cin.clear();                                         // Clear error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a number between 1 and 3." << endl;
        }
        else
        {
            break;
        }
    }
}

int main()
{
    vector<vector<char>> board(3, vector<char>(3, ' ')); // Initialize empty 3x3 board
    char currentPlayer = 'X';                            // Player X starts

    do
    {
        // Display the current state of the board
        cout << "Current Board:" << endl;
        displayBoard(board);

        // Player input
        int row, col;
        cout << "Player " << currentPlayer << ", enter your move:" << endl;
        getUserInput(row, col);

        // Check if the chosen cell is empty
        if (board[row - 1][col - 1] == ' ')
        {
            board[row - 1][col - 1] = currentPlayer;

            // Check for a win
            if (checkWin(board, currentPlayer))
            {
                cout << "Player " << currentPlayer << " wins!" << endl;
                break;
            }

            // Check for a draw
            if (checkDraw(board))
            {
                cout << "It's a draw!" << endl;
                break;
            }

            // Switch players
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }
        else
        {
            cout << "Cell already taken. Try again." << endl;
        }

    } while (true);

    return 0;
}
